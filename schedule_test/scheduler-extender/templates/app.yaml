{{- $project_name := .Chart.Name -}}

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
    brand: {{ .Values.brand }}
    version: {{ .Values.imageVersion }}
    chartVersion: {{ .Chart.Version }}
    tier: {{ .Values.tier | default "backend" }}
    imageVersion: {{ .Values.imageVersion }}
  namespace: {{ .Values.brand }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1 # For make sure always has at least n pod (Note : 2 for prod)
      maxSurge: 1
  replicas: {{ .Values.replicaCount | default 1 }}
  minReadySeconds: {{ .Values.minReadySeconds | default 5 }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit | default 3 }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        brand: {{ .Values.brand }}
    spec:
      serviceAccountName: {{ .Chart.Name }}-sa
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: type
                operator: NotIn
                values:
                - nginxgw
                - nginxgw-internal
        podAntiAffinity:  
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ .Chart.Name }}
              - key: brand
                operator: In
                values:
                - {{ .Values.brand }}
            topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Chart.Name }}
                - key: brand
                  operator: In
                  values:
                  - {{ .Values.brand }}
              topologyKey: failure-domain.beta.kubernetes.io/zone
      terminationGracePeriodSeconds: 30
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.scheduler_default_image }}
          command:
            - /bin/sh
            - -c
            - /usr/local/bin/kube-scheduler --leader-elect=false --scheduler-name={{ .Values.scheduler_name }} --policy-config-file=/data/scheduler_policy.json  --lock-object-namespace={{ .Values.lock_object_namespace }} --lock-object-name=lock-object-name --v=2 2>&1 
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10251
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            timeoutSeconds: 15
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10251
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            timeoutSeconds: 15
{{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{ end }}
          volumeMounts:
            - name: scheduler-policy
              mountPath: /data/

        - name: {{ .Chart.Name }}-api
          image: {{ .Values.scheduler_extender_image }}
          imagePullPolicy: Always
          command:
            - /bin/sh
            - -c
            - /kube_scheduler_extender --test_mode={{ .Values.scheduler.test_mode }} --cpu_threshold={{ .Values.scheduler.threshold.cpu }} --memory_threshold={{ .Values.scheduler.threshold.memory }} --load_threshold={{ .Values.scheduler.threshold.load }} --prometheus_server={{ .Values.scheduler.config.prometheus_server }} --cpu_idle_threshold={{ .Values.scheduler.threshold.cpu_idle}}
          livenessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: 15
            timeoutSeconds: 15
          readinessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: 15
            timeoutSeconds: 15
{{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{ end }}
      volumes:
      - name: scheduler-policy
        configMap:
          name: {{ .Chart.Name }}-scheduler-policy

      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}

{{- if .Values.service }}
{{- if .Values.service.internalPort }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
  annotations:
    prometheus.io/probe: 'httpcheck'
    prometheus.io/path: '/ping'
  namespace: {{ .Values.brand }}
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: {{ .Values.service.internalPort }}
  selector:
    app: {{ .Chart.Name }}
{{ end }}
{{ end }}

{{- if .Values.ingress.enabled -}}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
  namespace: {{ .Values.brand }}
  annotations:
    kubernetes.io/ingress.class: {{ .Values.ingress.class }}
    ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "Request-Id: $request_id";
    ingress.kubernetes.io/session-cookie-name: "suker200"
    ingress.kubernetes.io/session-cookie-hash: "md5"
    ingress.kubernetes.io/affinity: "cookie"
    ingress.kubernetes.io/force-ssl-redirect: "true" # for Offload TLS from cloud provider
spec:
  rules:
    {{- range $host := .Values.ingress.hosts }}
    - host: {{ $host }}
      http:
        paths:
          - path: /
            backend:
              serviceName: {{ $project_name }}
              servicePort: http
    {{- end -}}
  {{- if .Values.ingress.tls }}
  tls:
{{ toYaml .Values.ingress.tls | indent 4 }}
  {{- end -}}
{{- end -}}
{{- if .Values.autoScaling }}
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Chart.Name }}
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: {{ .Chart.Name }}
  minReplicas: {{ .Values.autoScaling.minReplicas | default 2 }}
  maxReplicas: {{ .Values.autoScaling.maxReplicas | default 10 }}
  targetCPUUtilizationPercentage: {{ .Values.autoScaling.targetCPUUtilizationPercentage | default 80 }}
{{ end -}}
{{- if .Values.cronJobs }}
  {{ $this := . }}
{{- range .Values.cronJobs }}
---
apiVersion: batch/v2alpha1
kind: CronJob
metadata:
  name: {{ $this.Chart.Name }}-{{ .name }}
  namespace: {{ $this.Values.brand }}
spec:
  schedule: {{ .scheduleTemplate | quote }}
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: {{ $this.Chart.Name }}
            image: {{ $this.Values.aws_account_id }}.dkr.ecr.us-east-1.amazonaws.com/{{ $this.Values.Prefix }}-{{ $this.Values.brand }}-{{ $this.Chart.Name }}:{{ $this.Values.imageVersion }}
            args:
            {{- range .args }}
            - {{ . }}
            {{- end }}
            env:
            {{- range $this.Values.env }}
              - name: {{ .name }}
                value: {{ .value | quote -}}
            {{ end }}
            {{- range $this.Values.configMap }}
              - name: {{ .name }}
                valueFrom:
                  configMapKeyRef:
                    name: "{{ .group | default "common-config" }}"
                    key: {{ .value | quote -}}
            {{ end }}
          restartPolicy: Never
{{ end }}
{{ end }}
